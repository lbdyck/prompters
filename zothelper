#!/bin/env bash

VER='0.08'
clear

#---------------------------------------------------#
# Name: zothelper                                   #
#                                                   #
# Purpose: prompt user for zopen command options    #
#                                                   #
# Dependencies: gum and zopen and bash              #
#                                                   #
# Syntax:  zothelper                                #
#                                                   #
# Author/Contributors:                              #
#   Lionel B. Dyck (lbdyck@gmail.com)               #
#   Igor Todorovski                                 #
#                                                   #
# Change History (current on top):                  #
#   2024/02/17 LBD - 0.08 Support zopen list/query  #
#   2024/02/12 LBD - 0.07 Don't default clean to all#
#   2024/02/12 LBD - 0.06 Major refinement (thx IT) #
#                         Move remove to subroutine #
#   2024/02/12 IT  - 0.05 Esc to go back            #
#                         Move install to subroutine#
#   2024/02/12 LBD - 0.04 Remove extraneous newlines#
#                         from echos                #
#   2024/02/12 LBD - 0.03 Enhance clean options     #
#   2024/02/11 LBD - 0.02 Add zopen upgrade         #
#   2024/02/11 LBD - 0.01 Creation                  #
#---------------------------------------------------#
# Repository: github.com/lbdyck/prompters           #
#---------------------------------------------------#
# Copyleft by Lionel B. Dyck 2024                   #
#---------------------------------------------------#

#----------------------------------------------------------------#
# Define the color for the banner                                #
#  5 - purple                                                    #
# 12 - blue shade                                                #
# 33 - darker blue                                               #
# 46 - green                                                     #
# 51 - turq shade                                                #
#----------------------------------------------------------------#
COLOR=51

#----------------------------------------------------------------#
# Define the spinner                                             #
# line, dot, minidot, jump, pulse, points, globe, moon,          #
# monkey, meter, hamburger                                       #
#----------------------------------------------------------------#
SPIN="line"
#SPIN="dot"
#SPIN="minidot"
#SPIN="jump"
#SPIN="pulse"
#SPIN="points"
#SPIN="globe"
#SPIN="moon"
#SPIN="monkey"
#SPIN="meter"
#SPIN="hamburger"

#----------------------------------------------------------#
# Define our temp and tempw variables                      #
#----------------------------------------------------------#
TEMP="/tmp/zopen_list"
TEMPW="/tmp/zopen_listw"

#----------------------------------------------------------#
# Define the MANDB variable - null to not run              #
#----------------------------------------------------------#
MANDB="mandb"
#MANDB=""

#----------------------------------------------------------#
# Define the gum environment variables                     #
#----------------------------------------------------------#

export GUM_INPUT_PROMPT_FOREGROUND="#$COLOR"
export GUM_INPUT_PLACEHOLDER=". . ."
export GUM_IMPORT_PROMPT="* "
export TERM=xterm-256color

#----------------------------------------------------------------#
# Define the TAG REDIR for our needs                             #
#----------------------------------------------------------------#
export _TAG_REDIR_IN=txt
export _TAG_REDIR_OUT=txt
export _TAG_REDIR_ERR=txt

#----------------------------------------------------------#
# Define our gum choose prompt text                        #
#----------------------------------------------------------#
HEADSEL="(ESC: back, Tab/Space: Toggle select, Up/Down: Navigate, Enter: Submit):"

#----------------------------------------------------------#
# Common Routines - do a Find for ##Start for the start    #
#                   of the actual code                     #
#----------------------------------------------------------#

#----------------------------------------------------------#
# routine for the zopen install option                     #
#----------------------------------------------------------#
install()
{
   # spinning something while we collect the list of all available packages
   gum spin --title "Generating list of available packages" -s "$SPIN" \
     --show-output --spinner.foreground="$COLOR" --title.foreground="$COLOR" \
     -- zopen query --list > "$TEMP"

   # Ask the user if they want to filter the packages
   FILTER=$(gum input --prompt "Enter text to filter the available packages or blank:" \
       --placeholder="e.g. ssh" --value=" " --header.foreground="$COLOR")

   # Test if there is a filter and if so then clean up working file
   if [ ! -z $FILTER ]; then
      grep -i $FILTER $TEMP > $TEMPW
      mv -f "$TEMPW" "$TEMP"
   fi
   cat "$TEMP" | grep Not | cut -d " " -f1  > "$TEMPW"
   #If you want to handle an option to return:
   #echo "Return..."  >> "$TEMPW"
   mv -f "$TEMPW" "$TEMP"

   # Prompt for package selections - any number allowed
   # but first remove all installed packages and only use
   # the package name
   SELECTED=$(cat "$TEMP" | \
     gum choose --no-limit \
     --height=18 \
     --header "Select packages to install $HEADSEL" --header.foreground="$COLOR")
   RC=$?

   # Remove the work files
   rm $TEMP

   # Escape pressed, go back to the beginning
   if [ "$RC" -eq 130 ] ; then
      install
   fi

   # Test if any packages selected - must have at least one
   if [ -z "$SELECTED" ]; then
       echo "No selections - exiting...."
       exit 0
   fi
   # Remove new line from SELECTED variable
   SELECTED=$(echo "$SELECTED" | tr '\n' ' ')

   # Generate the zopen install command
   INSTALL="zopen install -y $SELECTED"

   # report what we have generated for the user
   echo -e "Generated command: \n$INSTALL"

   # If gum confirm Yes then process the next command
   gum confirm "Execute Generated zopen install:" && $INSTALL && $MANDB
   exit 0
}

#----------------------------------------------------------#
# routine for the zopen remove option                      #
#----------------------------------------------------------#
remove()
{
   # spinning something while we collect the list of all available packages
   gum spin --title "Generating list of all installed packages" -s "$SPIN" \
     --show-output --spinner.foreground="$COLOR" --title.foreground="$COLOR" \
     -- zopen query --installed > "$TEMP"

   # Ask the user if they want to filter the packages
   FILTER=$(gum input --prompt "Enter text to filter the installed packages or blank:" \
       --placeholder="e.g. ssh" --value=" " --header.foreground="$COLOR")

   # Test if there is a filter and if so then clean up working file the
   # Prompt for package selections - any number allowed
   # but first only use the package name
   if [ ! -z $FILTER ]; then
      grep -i $FILTER $TEMP > $TEMPW
      SELECTED=$(cat "$TEMPW"| cut -d " " -f1  | \
      gum choose --no-limit \
      --height=18 \
     --header "Select packages to remove $HEADSEL" --header.foreground="$COLOR")
   else
     SELECTED=$(cat "$TEMP"| tail -n +2 | cut -d " " -f1  | \
        gum choose --no-limit \
       --header "Select packages to remove $HEADSEL" --header.foreground="$COLOR")
   fi
   RC=$?

   # Escape pressed, go back to the beginning
   if [ "$RC" -eq 130 ] ; then
      remove
   fi

   # Test if any packages selected - must have at least one
   if [ -z "$SELECTED" ]; then
       echo "No selections - exiting...."
       exit 0
   fi

   # Remove the work files
   rm $TEMP

   # Remove new line from SELECTED variable
   SELECTED=$(echo "$SELECTED" | tr '\n' ' ')

   # Generate the zopen remove command
   REMOVE="zopen remove -y $SELECTED"

   # report what we have generated for the user
   echo -e "Generated command: \n$REMOVE"

   # If gum confirm Yes then process the next command
   gum confirm "Execute Generated zopen remove:" && $REMOVE && $MANDB
   exit 0
}

#------------------------------#
# Routine for zopen list       #
#------------------------------#
list()
{

   LIST=$(gum choose "list" "remote-search" "installed" \
     --header "Select list option" --header.foreground="$COLOR")
   RC=$?

   # Escape pressed then exit
   if [ "$RC" -eq 130 ] ; then
      exit
   fi

   #-------------------#
   # update list parm  #
   #-------------------#
   FILTER=''
   case "$LIST" in
     list)
     LIST="--list"
     ;;
     remote-search)
     LIST="--remote-search"
     FILTER=1
     ;;
     installed)
     LIST="--installed"
     ;;
   esac

   if [ "$FILTER" == 1 ]; then
      ARG=$(gum input --prompt "Enter a package name or prefix to search for:" \
          --placeholder="e.g. ssh" --value=" " --header.foreground="$COLOR")
     LIST="$LIST $ARG"
   fi

   # spinning something while we collect the list of all available packages
   gum spin --title "Generating list results" -s "$SPIN" \
     --show-output --spinner.foreground="$COLOR" --title.foreground="$COLOR" \
     -- zopen list "$LIST" -d > "$TEMP"
   cat "$TEMP" | gum pager
   rm "$TEMP"
exit 0
}

##Start of the working code

#----------------------#
# Display our banner   #
#----------------------#
gum style \
   --foreground $COLOR --border-foreground $COLOR --border double \
   --align center --width 50 --margin "1 2" --padding "2 4" \
   'z/OS Open Tools Helper' $VER

#----------------------------------------------------------#
# Prompt the user for the zopen options                    #
#----------------------------------------------------------#
ZOT=$(zopen help | sed -n '/Command:/,/Options:/ {//!p}' | \
    gum choose --header.foreground="$COLOR" \
    --height=18 \
    --header "Select zopen command $HEADSEL")
ZOT=$(echo $ZOT | cut -d " " -f1 )

#----------------------------------------------------------#
# Test for any selections                                  #
#----------------------------------------------------------#
if [ -z "$ZOT" ]; then
   echo 'No selections made - exiting . . .'
   exit 0
fi

#----------------------------------------------------------#
# Process the Selected Command                             #
#----------------------------------------------------------#
case "$ZOT" in
#----------------------------------------------------------#
# zopen clean command - use all the options                #
#----------------------------------------------------------#
  clean )
    CLEAN=$(gum choose "cache" "dangling" "metadata" "unused" "all" \
       --no-limit --header="Select zopen clean option $HEADSEL" \
       --height=18 \
       --header.foreground="$COLOR")

    if [ -z "$CLEAN" ]; then
       echo "No clean option selected - terminating..."
       exit 0
    fi

    CLEAN=$(echo "$CLEAN" | sed -e 's/[^ ]*/--&/' -e 's/^-- //' | tr '\n' ' ')

    CLEAN="zopen clean $CLEAN --verbose"

    echo -e "Generated command: \n$CLEAN"

    # If gum confirm Yes then process the next command
    gum confirm "Execute Generated zopen command:" && $CLEAN
    exit 0
    ;;

#----------------------------------------------------------#
# install available packages                               #
#----------------------------------------------------------#
  install )
   install
   ;;

#----------------------------------------------------------#
# Remove any installed packages                            #
#----------------------------------------------------------#
  remove )
  remove
  ;;

#----------------------------------------------------------#
# List packages                                            #
#----------------------------------------------------------#
  list )
  list
  ;;

#----------------------------------------------------------#
# Query packages  (alias of list)                          #
#----------------------------------------------------------#
  query )
  list
  ;;

#----------------------------------------------------------#
# Upgrade any installed packages                           #
#----------------------------------------------------------#
  upgrade )

   UPGRADE="zopen upgrade -y"

   # report what we have generated for the user
   echo -e "Generated command: \n$UPGRADE"

   # If gum confirm Yes then process the next command
   gum confirm "Execute Generated zopen upgrade:" && $UPGRADE && $MANDB
   exit 0
   ;;
esac

echo "$ZOT selected but sadly that command has not been implemented within"
echo "the zothelper as yet."
echo ' '
echo 'Here is the help information for the command to help for now:'
echo ' '
zopen $ZOT -h
exit 0
